---
layout: post
title:  "운영체제 - 프로세스"
date:   2019-09-10 15:06:20 +0900
categories: 운영체제
background: '/img/posts/06.jpg'
---

학점은행제를 하면서 인강으로 공부했었던 내용이지만,  
3년이라는 시간이 지나면서 초기화 된 상태라  
두서 없이 이곳 저곳의 블로그 글을 참조하면서 작성해본다.


#### 병행 프로세스(Concurrent Process)
두개 이상의 프로세스들이 동시에 존재하며 실행 상태에 있는 것을 의미한다.

* 여러 프로세스들이 독립적으로 실행되는 것을 독립적 병행 프로세스, 서로 협력하며 동시에 실행되는 것을 협동적 병행 프로세스라고 한다.
* 병행 프로세스는 다중 처리 시스템이나 분산 처리 시스템에서 중요한 개념으로 사용 된다.

<br>

#### 임계 구역(Critical Section)
다중 프로그래밍 운영체제에서 여러개의 프로세스가 공유하는 데이터 및 자원에 대하여 어느 한 시점에서는 하나의 프로세스만 자원 또는 데이터를 사용하도록 지정된 공유 자원을 의미한다.

* 임계 구역에는 하나의 프로세스만 접근 할 수 있으며, 해당 프로세스가 자원을 반납한 후에만 다른 프로세스가 자원이나 데이터를 사용 할 수 있다.
* 임계 구역은 특정 프로세스가 독점 할 수 없으며, 임계 영역에서 수행 중인 프로세스는 인터럽트가 불가능하다.
* 임계 구역의 자원이나 데이터는 여러 프로세스가 사용해야 하므로(공유 자원) 임계구역 내에서의 작업은 신속하게 이루어져야 한다.
* 프로세스가 임 계구역에 대한 진입을 요청하면 일성시간 내에 진입을 허락 해야한다.
* 임계 구역에서 실행되는 프로세스가 없다면, 사용을 기다리고 있는 잔류 영역에 있는 프로세스의 사용을 허락해야하고, 그 외 프로세스는 진입 할 수 없다.

<br>

#### 상호배제 기법(Mutual Exclusion)
특정 프로세스가 공유 자원을 사용하고 있을때 다른 프로세스가 해당 공유 자원을 사용하지 못하게 제어하는 기법

* 여러 프로세스가 동시에 공유 자원을 사용 할 때 각 프로세스가 번갈아가며 공유 자원을 사용하도록 하는 것으로 임계 구역을 유지하는 기법
* 상호 배제 기법을 구현하기 위한 방법으로 소프트웨어적 구현과, 하드웨어적 구현이 있다.

<br>

#### 동기화 기법(Synchronization)
두개 이상의 프로세스를 한 시점에서는 동시에 처리 할 수 없으므로 각 프로세스에 대한 처리 순서를 결정하는 것으로 상호 배제의 한 형태이다.

* 구현 방법으로 세마포어와 모니터 가 있다.

##### 세마포어

* 신호기, 깃발을 뜻하며, 각 프로세스에 제어 신호를 전달하여 순서대로 작업을 수행하는 기법이다.
* 공유 자원에 접근하기 위해서는 S(SEMAPHORE)를 얻어야 하고, 접근이 끝나면 다른 TASK가 사용 할 수 있도록 S를 반환 하는 기법이다.
* 세마포어는 공유 자원이라는 방에 들어갈수 있는 키 같은 역할을 한다.
* P와 V라는 두개의 연산에 의해 동기화를 유지하고, 상호 배제의 원리를 보장한다.
* S는 P와 V 연산으로만 접근이 가능한 변수로, 공유 자원은 개수를 나타내며, 0과 1 혹은 0과 양의 값을 가지게 된다.
* P는 공유 자원을 사용하는 연산이며, V는 공유 자원을 반납하는 연산이다.
* 프로세스가 공유 자원을 사용하려고 하면 먼저 세마포어 변수를 통해 다른 프로세스가 자원을 점유 하고 있는지 조사하고, 자원을 사용 할 수 있으면 해당 자원을 점유 한 후 자원을 점유했다는 사실을 알리고, 다른 프로세스가 자원을 점유 중이라면 사용 가능 할 때까지 대기한다.
* 프로세스가 자원의 사용을 마치고 자원을 반납 하면 자원의 사용을 기다리는 프로세스에게 자원 사용이 가능 한 것을 알려준다.


##### 모니터(Monitor)
동기화를 구현하기 위한 특수 프로그램 기법으로 특정 공유 자원을 프로세스에게 할당하는데 필요한 데이터와 이 데이터를 처리하는 프로시저로 구성된다.
* 자료 추상화와 정보 은폐 개념을 기초로 하며 공유 자원을 할당하기 위한 병행성 구조로 이루어져 있다.
* 모니터 내의 공유 자원을 사용하려면 프로세스는 반드시 모니터의 진입부를 호출해야한다.
* 외부 프로시저는 직접 액세스 할 수 없다.
* 모니터의 경계에서 상호 배제가 시행된다.
* 모니터에는 한 순간에 하나의 프로세스만 진입하여 자원을 사용 할 수 있다.
* 모니터에는 Wait과 Signal 연산이 사용된다.


#### 교착상태(Deadlock)
상호 배제에 의해 발생하는 문제점으로, 둘 이상의 프로세스들이 자원을 점유한 상태에서  
서로 다른 프로세스가 점유하고 있는 자원을 요구하며 무한정 기다리는 현상을 말한다.  
결과적으로 서로 상대방의 작업이 끝나기만을 기다리고 있기 때문에 둘다 완료되지 못하는 상태를 말한다.  

예를 들면 하나의 사다리가 있고, 두 명의 사람이 각각 사다리의 위, 아래에 있는 경우  
아래 사람은 위로 올라가려고만 하고, 위에 있는 사람은 아래로 내려오려고만 한다면  
서로 상대방이 비켜줄 때까지 하염없이 기다리게 되고, 결과적으로 아무도 사다리를 올라가거나 내려가지 못하게 된다.

##### 발생 조건
교착 상태가 발생하기 위해서는 한번에 한개의 프로세스만이 공유 자원을 사용 할 수 있어야 한다는 상호 배제 원칙이 적용 되어야하고, 프로세스에 할당된 자원은 사용이 끝날때까지 강제로 빼앗을 수 없다는 비선점의 원칙이 적용될때 프로세스가 이미 자원을 갖고 있으면서 다른 자원의 할당을 요구하고 프로세스는 자신이 가지고 있는 자원을 점유 하면서 앞이나 뒤에 있는 프로세스의 자원을 요구하면 교착상태가 발생한다.

##### 해결 방법
* 예방 기법: 교착 상태가 발생하지 않도록 사전에 시스템을 제어하는 방법으로 교착 상태 발생의 4가지 중에서 어느 하나를 제거하는 방법, 자원의 낭비가 심한 것이 단점
    * 상호 배재 조건의 부정: 한번에 여러 개의 프로세스가 공유 자원을 사용 할 수 있게 한다.
    * 점유와 대기 조건의 부정: 프로세스가 실행되기 전에 필요한 모든 자원을 할당 하여 프로세스 대기를 없애거나, 자원이 점유되지 않은 상태에서만 자원 요구를 가능하게 한다.
    * 비선점 조건의 부정: 자원을 점유하고 있는 프로세스가 다른 자원을 요구할때 점유하고 있는 자원을 반납하고, 요구한 자원을 사용하기 위해 기다리게 한다.
    * 환형 대기 조건의 부정: 교착 상태의 예방을 위하여 각 자원 유형에 일련의 순서번호를 부여한다.

* 회피 기법: 교착 상태가 발생 할 가능성을 배제하지 않고 교착 상태가 발생하면 적절히 피해가는 방법으로 대표적으로 은행원 알고리즘이 있다.
    * 은행원 알고리즘은 은행에서 모든 고객의 요구가 충족되도록 현금을 할당 하는 것에서 유래 되었다.
    * 새로운 프로세스가 시스템에 들어갈 때 필요로하는 각 자원 종류에 대해 최대 수요를 정의해야 하며, 이 숫자는 시스템에 있는 모든 자원의 수를 넘지 않아야 한다.
    * 사용자가 자원을 요구할 때 시스템은 이 자원을 할당이 시스템을 안정 상태에 머무르게 하는가를 결정 해야한다.
    * 안정 상태에 있다면 자원을 할당 하고, 그렇지 않다면 다른 프로세스가 충분한 자원을 해제 할 때 까지 기다린다.

* 발견 기법: 시스템에 교착 상태가 발생했는지 점검하여 교착 상태에 있는 프로세스와 자원을 발견하는 방법.
* 회복 기법: 교착 상태를 일으킨 프로세스를 종료하고 교착 상태의 프로세스에 할당된 자원을 회수하여 프로세스나 자원을 회복하는 방법.


*`swift` 를 기준으로 교착 상태를 만들고, 해결하는 예제를 작성 할 수 있을지 확인해보자.  
`struct` 와 `class` 의 차이점과 연결하여 예시 작성 할 수 있을것 같은데...


[참조1](https://coding-factory.tistory.com/310)  
[참조2](https://blog.naver.com/PostView.nhn?blogId=bsy9109&logNo=130166635738&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F)